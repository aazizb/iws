@using IWSProject.Content
<script type="text/javascript">
    function OnSelectedIndexChanged(s, e) {
        $.ajax({
            url: '@Url.Action("PackUnit", "MasterLogistic")',
            type: "POST",
            data: { selectedIndex: s.GetValue() },
            success: function (data) {
                unit.SetText(data);
            },
            error: function (xhr, textStatus, errorThrown) {
                alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
            }
        });
        $.ajax({
            url: '@Url.Action("VatCode", "MasterLogistic")',
            type: "POST",
            data: { selectedIndex: s.GetValue() },
            success: function (data) {
                Vat.SetText(data);
            },
            error: function (xhr, textStatus, errorThrown) {
                alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
            }
        });
        $.ajax({
            url: '@Url.Action("Price", "MasterLogistic")',
            type: "POST",
            data: { selectedIndex: s.GetValue() },
            success: function (data) {
                price.SetText(data);
            },
            error: function (xhr, textStatus, errorThrown) {
                alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
            }
        });
        $.ajax({
            url: '@Url.Action("Currency", "MasterLogistic")',
            type: "POST",
            data: { selectedIndex: s.GetValue() },
            success: function (data) {
                Currency.SetText(data);
            },
            error: function (xhr, textStatus, errorThrown) {
                alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
            }
        });
    }
    function OnOIDSelectedIndexChanged(s, e) {
        $.ajax({
            url: '@Url.Action("Store", "MasterLogistic")',
            type: "POST",
            data: { selectedOIDIndex: s.GetValue() },
            success: function (data) {
                store.SetText(data);
            },
            error: function (xhr, textStatus, errorThrown) {
                alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
            }
        });
        $.ajax({
            url: '@Url.Action("Account", "MasterLogistic")',
            type: "POST",
            data: { selectedOIDIndex: s.GetValue() },
            success: function (data) {
                account.SetText(data);
            },
            error: function (xhr, textStatus, errorThrown) {
                alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
            }
        });
        $.ajax({
            url: '@Url.Action("HeaderText", "MasterLogistic")',
            type: "POST",
            data: { selectedOIDIndex: s.GetValue() },
            success: function (data) {
                HeaderText.SetText(data);
            },
            error: function (xhr, textStatus, errorThrown) {
                alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
            }
        });
    }

    var selectedIDs = null;
    var currentModelId = null;
    var expanded = false;
    var ndxMaster = 0;
    var ndxDetail = 0;
    var command;
    var isDetailRowExpanded = new Array();
    function OnMRowClick(s, e) {
        expanded = true;
        ndxMaster = e.visibleIndex;
        s.StartEditRow(ndxMaster);
        isDetailRowExpanded[ndxMaster] = true;
    }
    function OnDRowClick(s, e) {
        ndxDetail = e.visibleIndex
        s.SetFocusedRowIndex(ndxDetail);
        s.StartEditRow(ndxDetail);
    }
    function OnDetailRowExpanding(s, e) {
        isDetailRowExpanded[e.visibleIndex] = true;
    }
    function OnDetailRowCollapsing(s, e) {
        isDetailRowExpanded[e.visibleIndex] = false;
    }
    function OnDEndCallback(s, e) {
        s.SetFocusedRowIndex(e.visibleIndex);
    }
    function OnMBeginCallback(s, e) {
        e.customArgs["selectedIDs"] = selectedIDs;
        e.customArgs["currentModelId"] = currentModelId;
        currentModelId = null;
        selectedIDs = null;
        command = e.command;
    }
    function OnMSelectionChanged(s, e) {
        setGridHeaderCheckboxes(s, e);
        s.GetSelectedFieldValues("id", GetSelectedFieldValuesCallback);
    }
    function OnMEndCallback(s, e) {
        if (expanded === true) {
            expanded = false;
            s.ExpandDetailRow(ndxMaster);
        }
        if (command === "HIDEDETAILROW") {
            if (s.IsEditing || s.IsNewRowEditing)
                s.CancelEdit();
        }
        if (command === 'CANCELEDIT') {
            if (isDetailRowExpanded[ndxMaster] === true) {
                s.CollapseDetailRow(ndxMaster);
            }
        }
        if (currentModelId !== null) {
            callbackPanelPartialView.PerformCallback();
        }
        setGridHeaderCheckboxes(s, e);
        TrackLayout(s.cpClientLayout);
    }
    function GetSelectedFieldValuesCallback(values) {
        selectedIDs = values.join(';');
    }
    function OnSubmitClick(s, e) {
        currentModelId = ComboBoxModelId.GetValue();
        $("#selectedIDs").val(selectedIDs);
        callbackPanelPartialView.PerformCallback();
    }
    function TrackLayout(layout) {
        $("#LastLayout").text(layout);
    }
    function CheckedChanged(s, e) {
        MasterLogistic.PerformCallback({ isChecked: s.GetChecked() });
    }
    function setGridHeaderCheckboxes(s, e) {
        var indexes = MasterLogistic.cpIndiceSelected;
        checkBoxAll.SetChecked(s.GetSelectedRowCount() !== Object.size(indexes));
    }
    Object.size = function (obj) {
        var size = 0, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) size++;
        }
        return size;
    };
    function OnMInit(s, e) {
        ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
            "keydown",
            function (e) {
                switch (e.keyCode) {
                    case 13://ENTER
                        var isValidated = IsValidated.GetValue();
                        if (s.IsEditing() ) {
                            if (isValidated === false) {
                                s.UpdateEdit();
                            }
                            else {
                                s.CancelEdit();
                            }
                        }
                        break;
                    case 27://ESC
                        if (s.IsEditing()) {
                            s.CancelEdit();
                        }
                        break;
                    default:
                        break;
                }
            });
    }
    function OnDInit(s, e) {

        ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
            "keydown",
            function (e) {
                switch (e.keyCode) {
                    case 13://ENTER
                        if (s.IsEditing()) {
                            s.UpdateEdit();
                            s.AddNewRow();
                        }
                        break;
                    case 27://ESC
                        if (s.IsEditing()) {
                            s.CancelEdit();
                        }
                        break;
                    default:
                        break;
                }
            });
    }
    function OnButtonClick() {
        if (MasterLogistic.IsCustomizationWindowVisible()) {

            MasterLogistic.HideCustomizationWindow();
        }
        else {
            MasterLogistic.ShowCustomizationWindow();
        }
        UpdateButtonText();
    }
    function CustomizationWindowCloseUp(s, e) {
        UpdateButtonText();
    }
    function UpdateButtonText() {
        var text = MasterLogistic.IsCustomizationWindowVisible() ? "Hide" : "Show";
        btShowCustomizationWindow.SetText(text);
    }
    function OnModelIdSelectionChanged() {
        selectedIDs = null;
        currentModelId = ComboBoxModelId.GetValue();
        if (!callbackPanelPartialView.InCallback()) {
            callbackPanelPartialView.PerformCallback();
        }
    }
</script>
@{
    ViewBag.Title = IWSLocalResource.Logistic;
}
<div class="accountHeader">
    <h2>@ViewBag.Title</h2>
</div>
@using (Html.BeginForm("Index", "MasterLogistic"))
{

    @Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "FormLayout";
    settings.Width = Unit.Percentage(100);
    settings.Items.AddGroupItem(gsettings =>
    {
        gsettings.ColCount = 3;
        gsettings.Caption = IWSLocalResource.QueryDetail;

        gsettings.Items.Add(i =>
        {
            i.Caption = IWSLocalResource.Logistic;
            i.SetNestedContent(() =>
            {
                Html.RenderPartial("GridLookupPartial");
            });
        });
        gsettings.Items.Add(i =>
        {
            i.Caption = " ";
            i.Name = "btnSubmit";
            i.NestedExtension().Button(e =>
            {
                e.Name = "btnOk";
                e.Text = IWSLocalResource.Validate;
                e.ControlStyle.CssClass = "button";
                e.Width = Unit.Pixel(105);
                e.ClientSideEvents.Click = "OnSubmitClick";
                e.UseSubmitBehavior = false;
            });
        });
        gsettings.Items.Add(i =>
        {
            i.Caption = " ";
            i.SetNestedContent(() =>
            {
                Html.RenderPartial("ShowHideButtonPartialView");
            });
        });
    });
}).GetHtml()

    @Html.Partial("CallbackPanelPartialView")
}



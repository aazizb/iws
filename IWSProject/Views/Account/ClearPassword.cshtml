@model IWSProject.Models.SetPasswordViewModel
@using IWSProject.Content
@{
    ViewBag.Title = "Reset Password";
}
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();

    Action<MVCxFormLayoutItem> TextBoxSettingsMethod = (item) =>
    {
        item.NestedExtension().TextBox(s =>
        {
            s.Properties.Password = s.Name.Contains("Password");
            s.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom;
            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
            s.Properties.ValidationSettings.Display = Display.Dynamic;
            s.ShowModelErrors = true;
        });
    };
}
<div class="accountHeader">
        <h2>@ViewBag.Title</h2>
    </div>
@using (Html.BeginForm("Clearpassword", "Account", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "formLogin";

    settings.Items.AddGroupItem(group =>
    {
        group.Caption = IWSLocalResource.UserCredential;
        group.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;

        group.Items.Add(i => i.UserName, TextBoxSettingsMethod).Caption=IWSLocalResource.User;
        group.Items.Add(i => i.NewPassword, TextBoxSettingsMethod).Caption=IWSLocalResource.Password;
        group.Items.Add(i => i.ConfirmPassword, TextBoxSettingsMethod).Caption = IWSLocalResource.ConfirmPassword;
    });
    settings.Items.AddGroupItem(group =>
    {
        group.Caption = "  ";
        group.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        group.Items.Add(i =>
        {
            i.Caption = " ";
            i.NestedExtension().Button(b =>
            {
                b.Name = "resetPassword";
                b.Text = IWSLocalResource.SignUp;
                b.UseSubmitBehavior = true;
                b.Width = Unit.Pixel(120);
            });
        });
    });
}).GetHtml()
}

@*@Html.DevExpress().TextBoxFor(m => m.UserName, s => {
        s.Properties.Caption = "User Name";

        s.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
        s.ShowModelErrors = true;
        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
    }).GetHtml()
        @Html.DevExpress().TextBoxFor(m => m.NewPassword, s => {
           s.Properties.Caption = "New Password";
           s.Properties.Password = true;
           s.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
           s.ShowModelErrors = true;
           s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
        }).GetHtml()
        @Html.DevExpress().TextBoxFor(m => m.ConfirmPassword, s => {
            s.Properties.Caption = "Confirm Password";
            s.Properties.Password = true;
            s.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
            s.ShowModelErrors = true;
            s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText;
        }).GetHtml()
        <br />
        @Html.DevExpress().Button(s => {
            s.Name = "resetPassword";
            s.Text = "Reset Password";
            s.UseSubmitBehavior = true;
        }).GetHtml()
    }*@


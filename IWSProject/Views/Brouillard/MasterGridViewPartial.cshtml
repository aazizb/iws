@using IWSProject.Content
@using IWSProject.Models
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "Brouillard";
        settings.Width = Unit.Percentage(100);

        settings.CallbackRouteValues = new { Controller = "Brouillard", Action = "MasterGridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Brouillard", Action = "MasterGridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Brouillard", Action = "MasterGridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Brouillard", Action = "MasterGridViewPartialDelete" };

        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.SettingsContextMenu.Enabled = true;

        settings.ClientSideEvents.RowClick = "OnMRowClick";
        settings.ClientSideEvents.RowDblClick = "OnMRowClick";
        settings.ClientSideEvents.Init = "OnMInit";
        settings.ClientSideEvents.SelectionChanged = "OnMSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "OnMBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnMEndCallback";

        settings.SettingsBehavior.ConfirmDelete = true;
        settings.SettingsBehavior.EnableRowHotTrack = true;
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsBehavior.AllowSelectByRowClick = false;
        settings.SettingsBehavior.ColumnMoveMode = GridColumnMoveMode.AmongSiblings;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;
        settings.SettingsResizing.Visualization = ResizingMode.Live;

        settings.Styles.RowHotTrack.Cursor = "pointer";
        settings.Styles.RowHotTrack.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");
        settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;
        settings.Styles.AlternatingRow.BackColor = System.Drawing.Color.WhiteSmoke;
        settings.Styles.SelectedRow.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");
        settings.Styles.FocusedRow.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");

        settings.ControlStyle.Paddings.Padding = Unit.Pixel(1);
        settings.ControlStyle.Border.BorderWidth = Unit.Pixel(1);
        settings.ControlStyle.BorderBottom.BorderWidth = Unit.Pixel(1);

        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRowMenu = true;

        settings.SettingsPager.Visible = true;
        settings.SettingsPager.Position = PagerPosition.Bottom;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSize = 19;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Width = Unit.Percentage(8);
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        //settings.CommandColumn.ShowNewButtonInHeader = true;
        //settings.CommandColumn.ShowUpdateButton = false;
        //settings.CommandColumn.ShowCancelButton = false;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        settings.SettingsCommandButton.NewButton.Image.IconID = IconID.ActionsAdditem16x16;
        settings.SettingsCommandButton.NewButton.Image.ToolTip = IWSLocalResource.btnAddNew;
        settings.SettingsCommandButton.NewButton.Text = " ";

        settings.SettingsCommandButton.EditButton.Image.IconID = IconID.ActionsEditname16x16;
        settings.SettingsCommandButton.EditButton.Image.ToolTip = IWSLocalResource.btnEdit;
        settings.SettingsCommandButton.EditButton.Text = " ";

        settings.SettingsCommandButton.DeleteButton.Image.IconID = IconID.ActionsDeletelist16x16;
        settings.SettingsCommandButton.DeleteButton.Image.ToolTip = IWSLocalResource.btnDelete;
        settings.SettingsCommandButton.DeleteButton.Text = " ";

        settings.SettingsCommandButton.UpdateButton.Image.IconID = IconID.ActionsApply16x16;
        settings.SettingsCommandButton.UpdateButton.Image.ToolTip = IWSLocalResource.btnUpdate;
        settings.SettingsCommandButton.UpdateButton.Text = " ";

        settings.SettingsCommandButton.CancelButton.Image.IconID = IconID.ActionsCancel16x16;
        settings.SettingsCommandButton.CancelButton.Image.ToolTip = IWSLocalResource.btnCancel;
        settings.SettingsCommandButton.CancelButton.Text = " ";

        settings.CommandButtonInitialize = (s, e) =>
        {
            if (e.VisibleIndex == -1) return;
            MVCxGridView g = (MVCxGridView)s;
            bool isValidated = Convert.ToBoolean(g.GetRowValues(e.VisibleIndex, "IsValidated"));
            if (e.ButtonType == ColumnCommandButtonType.Edit || e.ButtonType == ColumnCommandButtonType.Delete ||
                e.ButtonType == ColumnCommandButtonType.SelectCheckbox || e.ButtonType == ColumnCommandButtonType.Update)
            {
                e.Visible = false.Equals(isValidated);
            }
        };

        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["IsValidated"] = false;
        };
        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.Dynamic;
        };
        settings.BeforeGetCallbackResult = (s, e) =>
        {
            MVCxGridView g = (MVCxGridView)s;
            if (ViewData["NewKeyValue"] != null)
            {
                g.DetailRows.ExpandRowByKey((int)ViewData["NewKeyValue"]);
            }
        };
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView g = (MVCxGridView)s;
            e.Properties["cpClientLayout"] = g.SaveClientLayout();
        };
        settings.ClientLayout = (s, e) =>
        {
            switch (e.LayoutMode)
            {
                case ClientLayoutMode.Loading:
                    if (Session["Layout"] != null)
                    {
                        e.LayoutData = Session["Layout"].ToString();
                    }
                    break;
                case ClientLayoutMode.Saving:
                    Session["Layout"] = e.LayoutData;
                    break;
            }
        };
#region Column

settings.KeyFieldName = "Id";

        settings.Columns.Add(column =>
        {
            column.FieldName = "Id";
            column.ReadOnly = true;
            column.Caption = IWSLocalResource.id;
            column.Width = Unit.Percentage(6);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Date";
            column.Caption = IWSLocalResource.ItemDate;
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "NumPiece";
            column.Caption = IWSLocalResource.ItemNumber;
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "AccountID";
            column.Caption = IWSLocalResource.account;
            column.Width = Unit.Percentage(20);
            column.EditorProperties().ComboBox(combo =>
            {
                combo.TextField = "Name";
                combo.ValueField = "id";
                combo.ValueType = typeof(string);
                combo.DataSource = IWSLookUp.GetAccounts();
                combo.Columns.Add("id").Caption = IWSLocalResource.id;
                combo.Columns.Add("name").Caption = IWSLocalResource.item;
                combo.Width = Unit.Percentage(100);
                combo.TextFormatString = "{0}-{1}";
                combo.FilterMinLength = 2;
                combo.CallbackPageSize = 15;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "OAccountID";
            column.Caption = IWSLocalResource.oaccount;
            column.Width = Unit.Percentage(20);
            column.Visible = false;
            column.EditorProperties().ComboBox(combo =>
            {
                combo.TextField = "Name";
                combo.ValueField = "id";
                combo.ValueType = typeof(string);
                combo.DataSource = IWSLookUp.GetAccounts();
                combo.Columns.Add("id").Caption = IWSLocalResource.id;
                combo.Columns.Add("name").Caption = IWSLocalResource.item;
                combo.Width = Unit.Percentage(100);
                combo.TextFormatString = "{0}-{1}";
                combo.FilterMinLength = 2;
                combo.CallbackPageSize = 15;
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Owner";
            column.Caption = IWSLocalResource.Owner;
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Debit";
            column.Caption = IWSLocalResource.debit;
            column.PropertiesEdit.DisplayFormatString = "N";
            column.Width = Unit.Percentage(6);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Credit";
            column.Caption = IWSLocalResource.credit;
            column.PropertiesEdit.DisplayFormatString = "N";
            column.Width = Unit.Percentage(6);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Currency";
            column.Caption = IWSLocalResource.Currency;
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "TypeDoc";
            column.Caption = IWSLocalResource.ItemType;
            column.Width = Unit.Percentage(10);
            column.EditorProperties().ComboBox(combo =>
            {
                combo.TextField = "Name";
                combo.ValueField = "ItemID";
                combo.ValueType = typeof(string);
                combo.DataSource = IWSLookUp.GetBrouillardType();
                combo.Columns.Add("Name").Caption = IWSLocalResource.item;
                combo.Width = Unit.Percentage(100);
                combo.TextFormatString = "{0}";
            });
        });
        settings.Columns.Add(column =>
        {
            column.EditFormSettings.Visible = DefaultBoolean.False;
            column.FieldName = "IsValidated";
            column.Caption = IWSLocalResource.IsValidated;
            column.Width = Unit.Percentage(5);
            column.ReadOnly = true;
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Text";
            column.Caption = IWSLocalResource.text;
            column.Width = Unit.Percentage(22);
            column.ColumnType = MVCxGridViewColumnType.Memo;
        });

#endregion

#region DetailTemplate

settings.SetDetailRowTemplateContent(c =>
        {
            Session["transid"] = DataBinder.Eval(c.DataItem, "ID");
            Session["IsValidated"] = (bool)DataBinder.Eval(c.DataItem, "IsValidated");
            Html.RenderAction("DetailGridViewPartial", new
            {
                transid = Session["transid"],
                IsValidated = Session["IsValidated"],
                newKeyValue = ViewData["NewKeyValue"]
            });
        });

#endregion
});

    if (ViewData["GenericError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["GenericError"]);
    }
}
@grid.Bind(Model).GetHtml()

@using IWSProject.Content
@using IWSProject.Models
@using IWSProject.Models.Entities
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "PdfUpdateGridView";
        settings.Width = Unit.Percentage(100);

        settings.CallbackRouteValues = new { Controller = "PdfUpdate", Action = "GridViewPartial" };

        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "PdfUpdate", Action = "GridViewPartialUpdate" };

        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsContextMenu.Enabled = true;

        settings.ClientSideEvents.CustomizationWindowCloseUp = "CustomizationWindowCloseUp";

        settings.ClientSideEvents.BeginCallback = "OnMBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnMEndCallback";

        settings.SettingsBehavior.EnableCustomizationWindow = true;
        settings.SettingsBehavior.EnableRowHotTrack = true;
        settings.SettingsBehavior.AllowSelectByRowClick = false;
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsBehavior.ColumnMoveMode = GridColumnMoveMode.AmongSiblings;

        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;
        settings.SettingsResizing.Visualization = ResizingMode.Live;

        settings.Styles.RowHotTrack.Cursor = "pointer";
        settings.Styles.RowHotTrack.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");
        settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;
        settings.Styles.AlternatingRow.BackColor = System.Drawing.Color.WhiteSmoke;
        settings.Styles.SelectedRow.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");
        settings.Styles.FocusedRow.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");

        settings.ControlStyle.Paddings.Padding = Unit.Pixel(10);
        settings.ControlStyle.Border.BorderWidth = Unit.Pixel(0);
        settings.ControlStyle.BorderBottom.BorderWidth = Unit.Pixel(1);

        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRowMenu = true;

        settings.SettingsPager.Visible = true;
        settings.SettingsPager.Position = PagerPosition.Bottom;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSize = 19;

        settings.Images.DetailCollapsedButton.IconID = IconID.ActionsAdd16x16;
        settings.Images.DetailExpandedButton.IconID = IconID.ActionsRemove16x16;

        settings.CommandColumn.Visible = true;

        settings.CommandColumn.Width = Unit.Percentage(8);


        settings.SettingsCommandButton.NewButton.Image.IconID = IconID.ActionsAdditem16x16;
        settings.SettingsCommandButton.NewButton.Image.ToolTip = IWSLocalResource.btnAddNew;
        settings.SettingsCommandButton.NewButton.Text = " ";

        settings.SettingsCommandButton.EditButton.Image.IconID = IconID.ActionsEditname16x16;
        settings.SettingsCommandButton.EditButton.Image.ToolTip = IWSLocalResource.btnEdit;
        settings.SettingsCommandButton.EditButton.Text = " ";

        settings.SettingsCommandButton.DeleteButton.Image.IconID = IconID.ActionsDeletelist16x16;
        settings.SettingsCommandButton.DeleteButton.Image.ToolTip = IWSLocalResource.btnDelete;
        settings.SettingsCommandButton.DeleteButton.Text = " ";

        GridViewCommandColumnCustomButton customButton = new GridViewCommandColumnCustomButton() { ID = "btnUpdatePdf", Text = " " };
        customButton.Image.IconID = DevExpress.Web.ASPxThemes.IconID.ActionsEditname16x16;
        customButton.Image.ToolTip = IWSLocalResource.btnEdit;

        settings.CommandColumn.CustomButtons.Add(customButton);

        settings.ClientSideEvents.CustomButtonClick = "function(s, e) {{ ShowUpdatePdfPopup(s, e); }}";

        settings.CustomButtonInitialize = (sender, e) =>
        {
            if (e.ButtonID == "btnUpdatePdf")
                if ((sender as MVCxGridView).GetRowValues(e.VisibleIndex, "FileName") == null)
                    e.Visible = DefaultBoolean.False;
        };

        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView g = (MVCxGridView)s;
            e.Properties["cpClientLayout"] = g.SaveClientLayout();
        };
        settings.ClientLayout = (s, e) =>
        {
            switch (e.LayoutMode)
            {
                case ClientLayoutMode.Loading:
                    if (Session["PdfUpdate"] != null)
                    {
                        e.LayoutData = Session["PdfUpdate"].ToString();
                    }
                    break;
                case ClientLayoutMode.Saving:
                    Session["PdfUpdate"] = e.LayoutData;
                    break;
            }
        };

        settings.KeyFieldName = "id";
        settings.Columns.Add(column =>
        {
            column.Caption = IWSLocalResource.HardCopy;
            column.FieldName = "FileName";
            column.Width = Unit.Percentage(20);
            column.SetDataItemTemplateContent(container =>
            {
                Html.DevExpress().HyperLink(hyperlink =>
                {

                    hyperlink.Name = "hl" + container.KeyValue.ToString();

                    hyperlink.Properties.Text = (string)DataBinder.Eval(container.DataItem, "FileName") ?? "......";

                    hyperlink.NavigateUrl = (DataBinder.Eval(container.DataItem, "FileName") == null) ? "javascript:void(0)" :
                                            Url.Action("DownloadFile", "PdfUpdate", new { itemId = container.KeyValue });

                    if (DataBinder.Eval(container.DataItem, "FileName") == null)
                    {
                        @Html.Hidden("documentId", (int)(container as GridViewDataItemTemplateContainer).KeyValue);
                        hyperlink.Properties.ClientSideEvents.Click = string.Format("function(s, e) {{ ShowPopup('{0}');}}",
                                    (int)(container as GridViewDataItemTemplateContainer).KeyValue);

                    }
                }).Render();
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id";
            column.Caption = IWSLocalResource.id;
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "oid";
            column.Caption = IWSLocalResource.oid;
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "CostCenter";
            column.Caption = IWSLocalResource.costcenters;
            column.Width = Unit.Percentage(16);
            column.EditorProperties().ComboBox(combo =>
            {
                combo.TextField = "Name";
                combo.ValueField = "id";
                combo.ValueType = typeof(string);
                combo.DataSource = IWSLookUp.GetCostCenters();
                combo.Columns.Add("id", IWSLocalResource.id, Unit.Percentage(25));
                combo.Columns.Add("name", IWSLocalResource.costcenters, Unit.Percentage(75));
                combo.Width = Unit.Percentage(100);
                combo.TextFormatString = "{0}-{1}";

            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "TypeJournal";
            column.Caption = IWSLocalResource.TypeJournal;
            column.Width = Unit.Percentage(10);
            column.EditorProperties().ComboBox(combo =>
            {
                combo.TextField = "Name";
                combo.ValueField = "Id";
                combo.ValueType = typeof(string);
                combo.DataSource = IWSLookUp.GetTypeJournal();
                combo.Columns.Add("Id", IWSLocalResource.id, Unit.Percentage(20));
                combo.Columns.Add("Name", IWSLocalResource.TypeJournal, Unit.Percentage(80));
                combo.TextFormatString = "{0}-{1}";
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "account";
            column.Caption = IWSLocalResource.account;
            column.Width = Unit.Percentage(18);
            column.EditorProperties().ComboBox(combo =>
            {
                combo.TextField = "Name";
                combo.ValueField = "id";
                combo.ValueType = typeof(string);
                combo.DataSource = IWSLookUp.GetAccounts((string)Session["IsVending"]);
                combo.Columns.Add("id", IWSLocalResource.id, Unit.Percentage(25));
                combo.Columns.Add("name", IWSLocalResource.supplier, Unit.Percentage(75));
                combo.Width = Unit.Percentage(100);
                combo.TextFormatString = "{0}-{1}";
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "TransDate";
            column.Caption = IWSLocalResource.TransDate;
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Width = Unit.Percentage(8);
            column.EditorProperties().DateEdit(d =>
            {
                d.EditFormatString = "MM/dd/yyyy";
                d.NullDisplayText = "MM/dd/yyyy";
                d.EditFormat = EditFormat.Custom;
                d.Width = Unit.Percentage(100);
                d.DisplayFormatString = "yyyy-MM-dd";
                d.DisplayFormatInEditMode = true;
                d.AllowUserInput = true;
                d.AllowMouseWheel = true;

            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "oPeriode";
            column.Caption = IWSLocalResource.periode;
            column.Width = Unit.Percentage(6);
            column.UnboundType = DevExpress.Data.UnboundColumnType.String;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "oYear";
            column.Caption = IWSLocalResource.Year;
            column.Width = Unit.Percentage(4);
            column.UnboundType = DevExpress.Data.UnboundColumnType.String;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "oMonth";
            column.Caption = IWSLocalResource.Month;
            column.Width = Unit.Percentage(4);
            column.UnboundType = DevExpress.Data.UnboundColumnType.String;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "oTotal";
            column.Caption = IWSLocalResource.Total;
            column.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
            column.PropertiesEdit.DisplayFormatString = "N";
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "oCurrency";
            column.Caption = IWSLocalResource.Currency;
            column.UnboundType = DevExpress.Data.UnboundColumnType.String;
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "IsValidated";
            column.Caption = IWSLocalResource.IsValidated;
            column.Width = Unit.Percentage(5);
            column.EditorProperties().CheckBox(checkBox =>
            {
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "HeaderText";
            column.Caption = IWSLocalResource.text;
            column.Width = Unit.Percentage(20);
        });

        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "oTotal").DisplayFormat = "N";

        settings.GroupSummary.Add(DevExpress.Data.SummaryItemType.Sum, "oTotal").DisplayFormat = "N";

    });

    if (ViewData["GenericError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["GenericError"]);
    }
}
@grid.Bind(Model).GetHtml()



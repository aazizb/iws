@using IWSProject.Content
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "depreciation";
        settings.Width = Unit.Percentage(100);

        settings.CallbackRouteValues = new { Controller = "Depreciation", Action = "MasterGridViewPartial" };

        settings.CustomActionRouteValues = new { Controller = "Depreciation", Action = "CustomGridViewCallback" };

        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsContextMenu.Enabled = true;

        settings.ClientSideEvents.CustomizationWindowCloseUp = "CustomizationWindowCloseUp";
        settings.ClientSideEvents.SelectionChanged = "OnSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "OnBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnEndCallback";

        settings.SettingsBehavior.EnableCustomizationWindow = true;
        settings.SettingsBehavior.EnableRowHotTrack = true;
        settings.SettingsBehavior.AllowSelectByRowClick = false;
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.SettingsBehavior.ColumnMoveMode = GridColumnMoveMode.AmongSiblings;

        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;
        settings.SettingsResizing.Visualization = ResizingMode.Live;

        settings.Styles.RowHotTrack.Cursor = "pointer";
        settings.Styles.RowHotTrack.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");
        settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;
        settings.Styles.AlternatingRow.BackColor = System.Drawing.Color.WhiteSmoke;
        settings.Styles.SelectedRow.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");
        settings.Styles.FocusedRow.BackColor = System.Drawing.ColorTranslator.FromHtml("#BFDBFF");

        settings.ControlStyle.Paddings.Padding = Unit.Pixel(10);
        settings.ControlStyle.Border.BorderWidth = Unit.Pixel(0);
        settings.ControlStyle.BorderBottom.BorderWidth = Unit.Pixel(1);

        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRowMenu = true;

        settings.SettingsPager.Visible = true;
        settings.SettingsPager.Position = PagerPosition.Bottom;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSize = 19;

        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;
        settings.SettingsDetail.ShowDetailRow = true;

        settings.Images.DetailCollapsedButton.IconID = IconID.ActionsAdd16x16;
        settings.Images.DetailExpandedButton.IconID = IconID.ActionsRemove16x16;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.Width = Unit.Percentage(8);

        settings.SettingsCommandButton.NewButton.Image.IconID = IconID.ActionsAdditem16x16;
        settings.SettingsCommandButton.NewButton.Image.ToolTip = IWSLocalResource.btnAddNew;
        settings.SettingsCommandButton.NewButton.Text = " ";

        settings.SettingsCommandButton.EditButton.Image.IconID = IconID.ActionsEditname16x16;
        settings.SettingsCommandButton.EditButton.Image.ToolTip = IWSLocalResource.btnEdit;
        settings.SettingsCommandButton.EditButton.Text = " ";

        settings.SettingsCommandButton.DeleteButton.Image.IconID = IconID.ActionsDeletelist16x16;
        settings.SettingsCommandButton.DeleteButton.Image.ToolTip = IWSLocalResource.btnDelete;
        settings.SettingsCommandButton.DeleteButton.Text = " ";

        settings.CommandColumn.SetHeaderTemplateContent(c =>
        {
            Html.DevExpress().CheckBox(selectAll =>
            {
                selectAll.Name = "checkBoxAll";
                selectAll.Text = IWSLocalResource.Select;
                selectAll.Properties.ClientSideEvents.CheckedChanged = "CheckedChanged";
            }).Render();
        });
        settings.AfterPerformCallback = (s, e) =>
        {
            MVCxGridView gridView = (MVCxGridView)s;

            int startIndex = gridView.VisibleStartIndex;
            int visibleRowCount = gridView.GetCurrentPageRowValues("Id").Count;
            int endIndex = startIndex + visibleRowCount - 1;
            bool isValidated;
            bool select = false;
            if (ViewBag.select != null)
                select = (bool)ViewBag.select;

            for (int i = startIndex; i <= endIndex; i++)
            {
                isValidated = (bool)gridView.GetRowValues(i, "IsValidated");
                if (select && !isValidated)
                    gridView.Selection.SelectRow(i);
                else
                    gridView.Selection.UnselectRow(i);
            }
        };

        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView g = (MVCxGridView)s;
            e.Properties["cpClientLayout"] = g.SaveClientLayout();
            e.Properties["cpIndexesSelected"] = g.Selection.Count;
        };
        settings.ClientLayout = (s, e) =>
        {
            switch (e.LayoutMode)
            {
                case ClientLayoutMode.Loading:
                    if (Session["DepreciationLayout"] != null)
                    {
                        e.LayoutData = Session["DepreciationLayout"].ToString();
                    }
                    break;
                case ClientLayoutMode.Saving:
                    Session["DepreciationLayout"] = e.LayoutData;
                    break;
            }
        };
        settings.CommandButtonInitialize = (s, e) =>
        {
            MVCxGridView Grid = s as MVCxGridView;
            if (e.ButtonType == ColumnCommandButtonType.SelectCheckbox)
            {
                e.Enabled = false;
                bool value = (bool)Grid.GetRowValues(e.VisibleIndex, "IsValidated");
                if (value == true) e.Enabled = e.Visible = false;
            }
        };
        settings.KeyFieldName = "Id";

        settings.Width = Unit.Percentage(100);

        settings.ControlStyle.Paddings.Padding = Unit.Pixel(10);
        settings.ControlStyle.Border.BorderWidth = Unit.Pixel(0);
        settings.ControlStyle.BorderBottom.BorderWidth = Unit.Pixel(1);

        settings.SettingsPager.Visible = true;
        settings.SettingsPager.Position = PagerPosition.Bottom;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;

        settings.SettingsPager.PageSize = 19;
        settings.Columns.Add(column =>
        {
            column.FieldName = "Id";
            column.Caption = IWSLocalResource.id;
            column.Width = Unit.Percentage(8);
            column.Visible = false;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "TransId";
            column.Caption = IWSLocalResource.Asset;
            column.Width = Unit.Percentage(8);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Period";
            column.Caption = IWSLocalResource.periode;
            column.Width = Unit.Percentage(11);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Asset";
            column.Caption = IWSLocalResource.name;
            column.Width = Unit.Percentage(38);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "BookValue";
            column.Caption = IWSLocalResource.BookValue;
            column.Width = Unit.Percentage(12);
            column.EditorProperties().TextBox(textBox =>
            {
                textBox.DisplayFormatString = "N";
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Depreciation";
            column.Caption = IWSLocalResource.Depreciation;
            column.Width = Unit.Percentage(12);
            column.EditorProperties().TextBox(textBox =>
            {
                textBox.DisplayFormatString = "N";
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Currency";
            column.Caption = IWSLocalResource.Currency;
            column.Width = Unit.Percentage(12);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "IsValidated";
            column.Caption = IWSLocalResource.IsValidated;
            column.Width = Unit.Percentage(7);
            column.EditorProperties().CheckBox(c =>
            {

            });
        });
        settings.CustomSummaryCalculate = (s, e) =>
        {
            ASPxSummaryItem item = ((ASPxSummaryItem)e.Item);

            if (item.FieldName != "Currency")
                return;

            if (e.IsTotalSummary)
            {
                e.TotalValue = e.GetValue("Currency");
            }
        };

        settings.SummaryDisplayText = (sender, e) =>
        {
            if (e.IsTotalSummary && e.Item.FieldName != "Currency")
            {
                e.Text = string.Format(IWSLocalResource.Total + ": {0:N}", e.Value);
            }
        };
        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRow = false;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRowMenu = true;

        settings.Settings.ShowGroupFooter = GridViewGroupFooterMode.VisibleAlways;
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "Depreciation").ShowInGroupFooterColumn = "Depreciation";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Custom, "Currency").ShowInGroupFooterColumn = "Currency";

        if (ViewData["GenericError"] != null)
        {
            settings.Settings.ShowFooter = true;
            settings.SetFooterRowTemplateContent(c =>
            {
                Html.ViewContext.Writer.Write(ViewData["GenericError"]);
            });
        }

    }).Bind(Model).GetHtml();

}
